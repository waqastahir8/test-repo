// <auto-generated />
using System;
using AmeriCorps.Users.Data.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AmeriCorps.Users.Data.Migrations.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20241112204323_SSAFileVerification")]
    partial class SSAFileVerification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<string>("AccessName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_name");

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_access");

                    b.HasIndex("AccessName")
                        .HasDatabaseName("ix_access_access_name");

                    b.ToTable("access", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<bool>("IsForeign")
                        .HasColumnType("boolean")
                        .HasColumnName("is_foreign");

                    b.Property<bool>("MovingWithinSixMonths")
                        .HasColumnType("boolean")
                        .HasColumnName("moving_within_six_months");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street1");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_address_user_id");

                    b.ToTable("address", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_attribute");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_attribute_user_id");

                    b.ToTable("attribute", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AwardCode")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("award_code");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("award_name");

                    b.Property<long>("Fain")
                        .HasColumnType("bigint")
                        .HasColumnName("fain");

                    b.Property<string>("GspListingNumber")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("gsp_listing_number");

                    b.Property<DateOnly?>("PerformanceEndDt")
                        .HasColumnType("date")
                        .HasColumnName("performance_end_dt");

                    b.Property<DateOnly?>("PerformanceStartDt")
                        .HasColumnType("date")
                        .HasColumnName("performance_start_dt");

                    b.Property<long>("Uei")
                        .HasColumnType("bigint")
                        .HasColumnName("uei");

                    b.HasKey("Id")
                        .HasName("pk_award");

                    b.HasIndex("AwardCode")
                        .HasDatabaseName("ix_award_award_code");

                    b.HasIndex("AwardCode", "AwardName", "GspListingNumber")
                        .HasDatabaseName("ix_award_award_code_award_name_gsp_listing_number")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AwardCode", "AwardName", "GspListingNumber"), "GIST");

                    b.ToTable("award", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ListingId")
                        .HasColumnType("integer")
                        .HasColumnName("listing_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_collection");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_collection_user_id");

                    b.ToTable("collection", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.CommunicationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preferred");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_communication_method");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_communication_method_user_id");

                    b.ToTable("communication_method", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<DateOnly>("DateAttendedFrom")
                        .HasColumnType("date")
                        .HasColumnName("date_attended_from");

                    b.Property<DateOnly>("DateAttendedTo")
                        .HasColumnType("date")
                        .HasColumnName("date_attended_to");

                    b.Property<bool>("DegreeCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("degree_completed");

                    b.Property<string>("DegreeTypePursued")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("degree_type_pursued");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("MajorAreaOfStudy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("major_area_of_study");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_education");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_education_user_id");

                    b.ToTable("education", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("PickListId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pick_list_id");

                    b.Property<string>("SpeakingAbility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("speaking_ability");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("WritingAbility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("writing_ability");

                    b.HasKey("Id")
                        .HasName("pk_language");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_language_user_id");

                    b.ToTable("language", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.MilitaryService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PickListId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pick_list_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_military_service");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_military_service_user_id");

                    b.ToTable("military_service", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Model.DirectDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<string>("AchRoutingNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ach_routing_number");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution_name");

                    b.Property<bool>("MailByPaycheck")
                        .HasColumnType("boolean")
                        .HasColumnName("mail_by_paycheck");

                    b.Property<string>("ReEnterAccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("re_enter_account_number");

                    b.Property<string>("ReEnterAchRoutingNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("re_enter_ach_routing_number");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_direct_deposit");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_direct_deposit_user_id");

                    b.ToTable("direct_deposit", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Model.TaxWithHolding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalWithHoldings")
                        .HasColumnType("text")
                        .HasColumnName("additional_with_holdings");

                    b.Property<string>("AdditionalWithHoldings2")
                        .HasColumnType("text")
                        .HasColumnName("additional_with_holdings2");

                    b.Property<string>("Deductions")
                        .HasColumnType("text")
                        .HasColumnName("deductions");

                    b.Property<string>("DependentsOver17")
                        .HasColumnType("text")
                        .HasColumnName("dependents_over17");

                    b.Property<string>("DependentsUnder17")
                        .HasColumnType("text")
                        .HasColumnName("dependents_under17");

                    b.Property<string>("ExtraWithHoldingAmount")
                        .HasColumnType("text")
                        .HasColumnName("extra_with_holding_amount");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("OtherIncome")
                        .HasColumnType("text")
                        .HasColumnName("other_income");

                    b.Property<int>("TaxWithHoldingType")
                        .HasColumnType("integer")
                        .HasColumnName("tax_with_holding_type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tax_with_holding");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tax_with_holding_user_id");

                    b.ToTable("tax_with_holding", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.OperatingSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<DateTime?>("InviteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invite_date");

                    b.Property<int>("InviteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("invite_user_id");

                    b.Property<string>("OperatingSiteName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operating_site_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Plus4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plus4");

                    b.Property<string>("ProgramYear")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("program_year");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address");

                    b.Property<string>("StreetAddress2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_operating_site");

                    b.HasIndex("OperatingSiteName")
                        .HasDatabaseName("ix_operating_site_operating_site_name");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_operating_site_project_id");

                    b.HasIndex("ProgramYear", "OperatingSiteName", "ContactName", "EmailAddress", "PhoneNumber", "StreetAddress", "StreetAddress2", "City", "State", "ZipCode")
                        .HasDatabaseName("ix_operating_site_program_year_operating_site_name_contact_name")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ProgramYear", "OperatingSiteName", "ContactName", "EmailAddress", "PhoneNumber", "StreetAddress", "StreetAddress2", "City", "State", "ZipCode"), "GIST");

                    b.ToTable("operatingSite", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org_code");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org_name");

                    b.HasKey("Id")
                        .HasName("pk_organization");

                    b.HasIndex("OrgCode")
                        .HasDatabaseName("ix_organization_org_code");

                    b.ToTable("organization", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int?>("AuthorizedRepId")
                        .HasColumnType("integer")
                        .HasColumnName("authorized_rep_id");

                    b.Property<int>("AwardId")
                        .HasColumnType("integer")
                        .HasColumnName("award_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("city");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EnrollmentEndDt")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_end_dt");

                    b.Property<DateOnly?>("EnrollmentStartDt")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_start_dt");

                    b.Property<long>("GspProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("gsp_project_id");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("program_name");

                    b.Property<string>("ProgramYear")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("program_year");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("project_code");

                    b.Property<int?>("ProjectDirectorId")
                        .HasColumnType("integer")
                        .HasColumnName("project_director_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("project_name");

                    b.Property<string>("ProjectOrgCode")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("project_org_code");

                    b.Property<DateOnly?>("ProjectPeriodEndDt")
                        .HasColumnType("date")
                        .HasColumnName("project_period_end_dt");

                    b.Property<DateOnly?>("ProjectPeriodStartDt")
                        .HasColumnType("date")
                        .HasColumnName("project_period_start_dt");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("project_type");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("street_address");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_project");

                    b.HasIndex("AuthorizedRepId")
                        .HasDatabaseName("ix_project_authorized_rep_id");

                    b.HasIndex("AwardId")
                        .HasDatabaseName("ix_project_award_id");

                    b.HasIndex("ProjectCode")
                        .HasDatabaseName("ix_project_project_code");

                    b.HasIndex("ProjectDirectorId")
                        .HasDatabaseName("ix_project_project_director_id");

                    b.HasIndex("ProjectName", "ProjectOrgCode", "ProjectCode", "ProjectId", "GspProjectId", "ProgramName", "StreetAddress", "City", "State", "ProjectType", "Description")
                        .HasDatabaseName("ix_project_project_name_project_org_code_project_code_project_")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ProjectName", "ProjectOrgCode", "ProjectCode", "ProjectId", "GspProjectId", "ProgramName", "StreetAddress", "City", "State", "ProjectType", "Description"), "GIST");

                    b.ToTable("project", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.ProjectAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<string>("AccessName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_name");

                    b.Property<int>("UserProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("user_project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_access");

                    b.HasIndex("UserProjectId")
                        .HasDatabaseName("ix_project_access_user_project_id");

                    b.ToTable("project_access", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.ProjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FunctionalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("functional_name");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<int>("UserProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("user_project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_role");

                    b.HasIndex("UserProjectId")
                        .HasDatabaseName("ix_project_role_user_project_id");

                    b.ToTable("project_role", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<bool>("CanContact")
                        .HasColumnType("boolean")
                        .HasColumnName("can_contact");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<bool>("Contacted")
                        .HasColumnType("boolean")
                        .HasColumnName("contacted");

                    b.Property<DateOnly>("DateContacted")
                        .HasColumnType("date")
                        .HasColumnName("date_contacted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship");

                    b.Property<int>("RelationshipLength")
                        .HasColumnType("integer")
                        .HasColumnName("relationship_length");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reference");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reference_user_id");

                    b.ToTable("reference", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Relative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnualIncome")
                        .HasColumnType("integer")
                        .HasColumnName("annual_income");

                    b.Property<string>("HighestEducationLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("highest_education_level");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_relative");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_relative_user_id");

                    b.ToTable("relative", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FunctionalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("functional_name");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_type");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("RoleName")
                        .HasDatabaseName("ix_role_role_name");

                    b.ToTable("role", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.SavedSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filters")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filters");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("date")
                        .HasColumnName("last_run");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<bool>("NotificationsOn")
                        .HasColumnType("boolean")
                        .HasColumnName("notifications_on");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_saved_search");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_saved_search_user_id");

                    b.ToTable("saved_search", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PickListId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pick_list_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_skill");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_skill_user_id");

                    b.ToTable("skill", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.SocialSecurityVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CitizenshipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("citizenship_code");

                    b.Property<int>("CitizenshipStatus")
                        .HasColumnType("integer")
                        .HasColumnName("citizenship_status");

                    b.Property<DateTime?>("CitizenshipUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("citizenship_updated_date");

                    b.Property<int>("FileStatus")
                        .HasColumnType("integer")
                        .HasColumnName("file_status");

                    b.Property<int>("LastSubmitUser")
                        .HasColumnType("integer")
                        .HasColumnName("last_submit_user");

                    b.Property<DateTime?>("ProcessStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("process_start_date");

                    b.Property<string>("SSAVerificationTaskId")
                        .HasColumnType("text")
                        .HasColumnName("ssa_verification_task_id");

                    b.Property<int>("SocialSecurityStatus")
                        .HasColumnType("integer")
                        .HasColumnName("social_security_status");

                    b.Property<DateTime?>("SocialSecurityUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("social_security_updated_date");

                    b.Property<int>("SubmitCount")
                        .HasColumnType("integer")
                        .HasColumnName("submit_count");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_code");

                    b.HasKey("Id")
                        .HasName("pk_social_security_verification");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_social_security_verification_user_id");

                    b.ToTable("socialSecurityVerification", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.SubGrantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("city");

                    b.Property<string>("GranteeCode")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("grantee_code");

                    b.Property<string>("GranteeName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("grantee_name");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("street_address");

                    b.Property<long>("Uei")
                        .HasColumnType("bigint")
                        .HasColumnName("uei");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_sub_grantee");

                    b.HasIndex("GranteeCode")
                        .HasDatabaseName("ix_sub_grantee_grantee_code");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_sub_grantee_project_id");

                    b.ToTable("sub_grantee", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_of_birth");

                    b.Property<int>("CitzenShipStatus")
                        .HasColumnType("integer")
                        .HasColumnName("citzen_ship_status");

                    b.Property<string>("CountryOfBirth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_of_birth");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateOnly?>("DocumentExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("document_expiration_date");

                    b.Property<string>("EncryptedSocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("encrypted_social_security_number");

                    b.Property<string>("ExternalAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_account_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("InviteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invite_date");

                    b.Property<int>("InviteUserId")
                        .HasColumnType("integer")
                        .HasColumnName("invite_user_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org_code");

                    b.Property<string>("PreferredName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferred_name");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<string>("Pronouns")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pronouns");

                    b.Property<string>("ResidentRegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("resident_registration_number");

                    b.Property<bool>("Searchable")
                        .HasColumnType("boolean")
                        .HasColumnName("searchable");

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("text")
                        .HasColumnName("state_of_birth");

                    b.Property<string>("Suffix")
                        .HasColumnType("text")
                        .HasColumnName("suffix");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserAccountStatus")
                        .HasColumnType("integer")
                        .HasColumnName("user_account_status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("OrgCode", "UserAccountStatus", "EncryptedSocialSecurityNumber")
                        .HasDatabaseName("ix_user_org_code_user_account_status_encrypted_social_security");

                    b.ToTable("user", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.UserProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_code");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_name");

                    b.Property<string>("ProjectOrg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_org");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("project_type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_project");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_project_user_id");

                    b.ToTable("userProject", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FunctionalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("functional_name");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", "users");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Address", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Attribute", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Attributes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attribute_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Collection", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Collection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_collection_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.CommunicationMethod", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("CommunicationMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_communication_method_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Education", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Education")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_education_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Language", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_language_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.MilitaryService", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("MilitaryService")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_military_service_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Model.DirectDeposit", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("DirectDeposits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_direct_deposit_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Model.TaxWithHolding", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("TaxWithHoldings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tax_with_holding_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.OperatingSite", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.Project", null)
                        .WithMany("OperatingSites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operating_site_project_project_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Project", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", "AuthorizedRep")
                        .WithMany()
                        .HasForeignKey("AuthorizedRepId")
                        .HasConstraintName("fk_project_user_authorized_rep_id");

                    b.HasOne("AmeriCorps.Users.Data.Core.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_award_award_id");

                    b.HasOne("AmeriCorps.Users.Data.Core.User", "ProjectDirector")
                        .WithMany()
                        .HasForeignKey("ProjectDirectorId")
                        .HasConstraintName("fk_project_user_project_director_id");

                    b.Navigation("AuthorizedRep");

                    b.Navigation("Award");

                    b.Navigation("ProjectDirector");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.ProjectAccess", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.UserProject", null)
                        .WithMany("ProjectAccess")
                        .HasForeignKey("UserProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_access_user_projects_user_project_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.ProjectRole", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.UserProject", null)
                        .WithMany("ProjectRoles")
                        .HasForeignKey("UserProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_role_user_projects_user_project_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Reference", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("References")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reference_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Relative", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Relatives")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_relative_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.SavedSearch", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("SavedSearches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saved_search_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Skill", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_skill_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.SocialSecurityVerification", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithOne("SocialSecurityVerification")
                        .HasForeignKey("AmeriCorps.Users.Data.Core.SocialSecurityVerification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_social_security_verification_user_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.SubGrantee", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.Project", null)
                        .WithMany("SubGrantees")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_sub_grantee_projects_project_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.UserProject", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_project_user_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.UserRole", b =>
                {
                    b.HasOne("AmeriCorps.Users.Data.Core.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_users_user_id");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.Project", b =>
                {
                    b.Navigation("OperatingSites");

                    b.Navigation("SubGrantees");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Attributes");

                    b.Navigation("Collection");

                    b.Navigation("CommunicationMethods");

                    b.Navigation("DirectDeposits");

                    b.Navigation("Education");

                    b.Navigation("Languages");

                    b.Navigation("MilitaryService");

                    b.Navigation("References");

                    b.Navigation("Relatives");

                    b.Navigation("Roles");

                    b.Navigation("SavedSearches");

                    b.Navigation("Skills");

                    b.Navigation("SocialSecurityVerification")
                        .IsRequired();

                    b.Navigation("TaxWithHoldings");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("AmeriCorps.Users.Data.Core.UserProject", b =>
                {
                    b.Navigation("ProjectAccess");

                    b.Navigation("ProjectRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
