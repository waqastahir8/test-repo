name: Release Dev

on:
  workflow_dispatch:
  push:
    branches:
    - dev

env:
  ENVIRONMENT: Development
  AZURE_WEBAPP_NAME: app-userservice-dev-001

  DB_RG: rg-dbs-dev-westus001
  DB_NAME: cospos-dev-west
  EF_MIGRATIONS_PROJECT: ./AmeriCorps.Users.Data.Migrations
  
  SOLUTION_FILE: ./AmeriCorpsUsers.sln
  API_PROJECT: ./AmeriCorps.Users.Api
  NUGET_PROJECT_FILE: ./AmeriCorps.Users.Models/AmeriCorps.Users.Models.csproj
  BUILD_CONFIGURATION: Release

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: Dev
    permissions:
      contents: read
      packages: write


    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: .net restore
        run: |
          dotnet nuget update source github --username "${{ secrets.NUGET_USER }}" --password "${{ secrets.NUGET_PWD }}" --store-password-in-clear-text
          dotnet restore ${{ env.SOLUTION_FILE }}

      - name: .net test
        run: dotnet test ${{ env.SOLUTION_FILE }} --no-restore --collect:"XPlat Code Coverage" --settings coverlet.runsettings.xml

      - name: publish nuget package
        run: |
          dotnet pack ${{ env.NUGET_PROJECT_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --artifacts-path ./nuget
          echo "${{ secrets.GITHUB_TOKEN }}"
          dotnet nuget update source github --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
          dotnet nuget push "./nuget/package/release/*.nupkg" --source "github" --skip-duplicate
          
      - name: generate code coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:"*.Tests/TestResults/*/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:TextSummary
          more coveragereport/Summary.txt

      - name: upload code coverage report
        uses: actions/upload-artifact@v3
        with:
          name: CodeCoverageReport
          path: coveragereport/Summary.txt
          
      - name: .net publish
        run: dotnet publish ${{ env.API_PROJECT }} --configuration Release --no-restore --output './publish'

      - name: Get runner IP
        id: ip
        uses: candidob/get-runner-ip@v1.0.0

      - name: run EF migration
        run: |
          az login --user ${{ secrets.AZURE_DB_USER }} --password ${{ secrets.AZURE_DB_PWD }} --tenant ${{ secrets.AZURE_DB_TENANT }}
          az account set --subscription '${{ secrets.AZURE_DB_SUBSCRIPTION }}'

          
          echo Whitelisting ${{ steps.ip.outputs.ipv4 }}
          az cosmosdb postgres firewall-rule create -n git-hub-runner -g ${{ env.DB_RG }} --cluster-name ${{ env.DB_NAME }} --end-ip-address ${{ steps.ip.outputs.ipv4 }} --start-ip-address ${{ steps.ip.outputs.ipv4 }}
          
          dotnet tool install --global dotnet-ef
          
          export KeyVaultOptions__ClientSecret=${{secrets.KEYVAULT_CLIENT_SECRET_DEV}}
          cd ${{env.EF_MIGRATIONS_PROJECT}}
          dotnet ef database update -- --environment ${{env.ENVIRONMENT}}
          unset KeyVaultOptions__ClientSecret

          az cosmosdb postgres firewall-rule delete -n git-hub-runner -g ${{ env.DB_RG }} --cluster-name ${{ env.DB_NAME }} --yes
          az logout

      - name: release App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_DEV }}
          package: './publish'
